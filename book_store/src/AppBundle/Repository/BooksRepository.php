<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Book;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;

/**
 * BooksRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BooksRepository extends EntityRepository
{

    public function getAllLoans() {
        $qb = $this->createQueryBuilder('l')
        ->leftJoin('l.customer', 'b')
        ->addSelect('b', 'l')
        ->orderBy('l.customer', 'ASC');

        $qb->where('l.customer is not null');

        return $qb->getQuery()->getResult();
    }

    public function getAvailableBooks()
    {
        return $this->createQueryBuilder('b')
            ->leftJoin('b.customer', 'c')
            ->addSelect('c', 'b')
            ->where('b.customer is null')
            ->orderBy('b.name');
    }

    /*Pour rendre un livre en fonction de son id + liaison avec le customer d'oÃ¹ i=id et b = book */
    public function getOneBookById(int $id) {

        $test= $this->createQueryBuilder('i')
            ->leftJoin('i.customer', 'b')
            ->addSelect('b', 'i')
            ->where('i.id = :ID')
            ->andWhere('i.customer is not null')
            ->setParameter('ID',$id);



        return $test->getQuery()->getOneOrNullResult();


    }
}
